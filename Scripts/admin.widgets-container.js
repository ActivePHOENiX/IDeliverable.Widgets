/*
** NOTE: This file is generated by Gulp and should not be edited directly!
** Any changes made directly to this file will be overwritten next time its asset group is processed by Gulp.
*/

/// <reference path="typings/jquery/jquery.d.ts"/>
/// <reference path="typings/jquery/jqueryui.d.ts"/>
/// <reference path="typings/the-admin.d.ts"/>
var WidgetsContainer;
(function (WidgetsContainer) {
    $(function () {
        var removedWidgets = new Array();
        // Handle Add Widget button.
        $(".add-widget").on("click", function (e) {
            e.preventDefault();
            var hostId = $(this).data("host-id");
            var form = $(this).parents("form:first");
            var fieldset = $(this).parents("fieldset:first");
            var formActionValue = fieldset.find("input[name='submit.Save']");
            var url = $(this).attr("href");
            if (hostId === 0) {
                form.attr("action", url);
            }
            else {
                formActionValue.val("submit.Save");
                $("input[type='hidden'][name='returnUrl']").val(url);
            }
            form.submit();
        });
        // Handle Delete Widget button.
        $("div.widgets").on("click", "a.remove-widget", function (e) {
            e.preventDefault();
            if (!confirm($(this).data("confirm")))
                return;
            var li = $(this).parents("li:first");
            var widgetId = li.data("widget-id");
            li.remove();
            removedWidgets.push(widgetId);
            $("input[name='removedWidgets']").val(JSON.stringify(removedWidgets));
            updateWidgetPlacementField();
        });
        var updateWidgetPlacementField = function () {
            var widgetPlacementField = $("input[name='widgetPlacement']");
            var data = {
                zones: {}
            };
            $("div.widgets ul.widgets").each(function () {
                var zone = $(this).data("zone");
                data.zones[zone] = {
                    widgets: new Array()
                };
                $(this).find("li").each(function () {
                    var widgetId = $(this).data("widget-id");
                    data.zones[zone].widgets.push(widgetId);
                });
            });
            var text = JSON.stringify(data);
            widgetPlacementField.val(text);
        };
        // Initialize sortable widgets.
        $("div.widgets ul.widgets").sortable({
            connectWith: "div.widgets ul.widgets",
            dropOnEmpty: true,
            placeholder: "sortable-placeholder",
            receive: function (e, ui) {
                updateWidgetPlacementField();
            },
            update: function (e, ui) {
                updateWidgetPlacementField();
            }
        });
        // Initialize Expando control
        $("#widgetsPlacement legend").expandoControl(function (controller) {
            return controller.nextAll(".expando");
        }, {
            collapse: true,
            remember: true });
    });
})(WidgetsContainer || (WidgetsContainer = {}));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFkbWluLndpZGdldHMtY29udGFpbmVyLmpzIiwiYWRtaW4ud2lkZ2V0cy1jb250YWluZXIudHMiXSwibmFtZXMiOlsiV2lkZ2V0c0NvbnRhaW5lciJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEFDTEEsa0RBQWtEO0FBQ2xELG9EQUFvRDtBQUNwRCw4Q0FBOEM7QUFFOUMsSUFBTyxnQkFBZ0IsQ0FtRnRCO0FBbkZELFdBQU8sZ0JBQWdCLEVBQUMsQ0FBQztJQUNyQkEsQ0FBQ0EsQ0FBQ0E7UUFFRSxJQUFJLGNBQWMsR0FBRyxJQUFJLEtBQUssRUFBTyxDQUFDO1FBRXRDLDRCQUE0QjtRQUM1QixDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxVQUFVLENBQW9CO1lBQ3ZELENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUNuQixJQUFJLE1BQU0sR0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQzdDLElBQUksSUFBSSxHQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDakQsSUFBSSxRQUFRLEdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1lBQ3pELElBQUksZUFBZSxHQUFXLFFBQVEsQ0FBQyxJQUFJLENBQUMsMkJBQTJCLENBQUMsQ0FBQztZQUN6RSxJQUFJLEdBQUcsR0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBRXZDLEVBQUUsQ0FBQSxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsQ0FBQSxDQUFDO2dCQUNiLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQzdCLENBQUM7WUFDRCxJQUFJLENBQUEsQ0FBQztnQkFDRCxlQUFlLENB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QUU7WUFDdEMsUUFBUSxFQUFFLElBQUk7WUFDZCxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUNsQyxDQUFDLENBQUNBLENBQUNBO0FBQ1BBLENBQUNBLEVBbkZNLGdCQUFnQixLQUFoQixnQkFBZ0IsUUFtRnRCIiwiZmlsZSI6ImFkbWluLndpZGdldHMtY29udGFpbmVyLmpzIiwic291cmNlc0NvbnRlbnQiOltudWxsLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwidHlwaW5ncy9qcXVlcnkvanF1ZXJ5LmQudHNcIi8+XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJ0eXBpbmdzL2pxdWVyeS9qcXVlcnl1aS5kLnRzXCIvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwidHlwaW5ncy90aGUtYWRtaW4uZC50c1wiLz5cclxuXHJcbm1vZHVsZSBXaWRnZXRzQ29udGFpbmVyIHtcclxuICAgICQoZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICB2YXIgcmVtb3ZlZFdpZGdldHMgPSBuZXcgQXJyYXk8YW55PigpO1xyXG5cclxuICAgICAgICAvLyBIYW5kbGUgQWRkIFdpZGdldCBidXR0b24uXHJcbiAgICAgICAgJChcIi5hZGQtd2lkZ2V0XCIpLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24gKGU6IEpRdWVyeUV2ZW50T2JqZWN0KSB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgdmFyIGhvc3RJZDogbnVtYmVyID0gJCh0aGlzKS5kYXRhKFwiaG9zdC1pZFwiKTtcclxuICAgICAgICAgICAgdmFyIGZvcm06IEpRdWVyeSA9ICQodGhpcykucGFyZW50cyhcImZvcm06Zmlyc3RcIik7XHJcbiAgICAgICAgICAgIHZhciBmaWVsZHNldDogSlF1ZXJ5ID0gJCh0aGlzKS5wYXJlbnRzKFwiZmllbGRzZXQ6Zmlyc3RcIik7XHJcbiAgICAgICAgICAgIHZhciBmb3JtQWN0aW9uVmFsdWU6IEpRdWVyeSA9IGZpZWxkc2V0LmZpbmQoXCJpbnB1dFtuYW1lPSdzdWJtaXQuU2F2ZSddXCIpO1xyXG4gICAgICAgICAgICB2YXIgdXJsOiBzdHJpbmcgPSAkKHRoaXMpLmF0dHIoXCJocmVmXCIpO1xyXG5cclxuICAgICAgICAgICAgaWYoaG9zdElkID09PSAwKXtcclxuICAgICAgICAgICAgICAgIGZvcm0uYXR0cihcImFjdGlvblwiLCB1cmwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICBmb3JtQWN0aW9uVmFsdWUudmFsKFwic3VibWl0LlNhdmVcIik7XHJcbiAgICAgICAgICAgICAgICAkKFwiaW5wdXRbdHlwZT0naGlkZGVuJ11bbmFtZT0ncmV0dXJuVXJsJ11cIikudmFsKHVybCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGZvcm0uc3VibWl0KCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIEhhbmRsZSBEZWxldGUgV2lkZ2V0IGJ1dHRvbi5cclxuICAgICAgICAkKFwiZGl2LndpZGdldHNcIikub24oXCJjbGlja1wiLCBcImEucmVtb3ZlLXdpZGdldFwiLCBmdW5jdGlvbiAoZTogSlF1ZXJ5RXZlbnRPYmplY3QpIHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgICAgaWYoIWNvbmZpcm0oJCh0aGlzKS5kYXRhKFwiY29uZmlybVwiKSkpXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcblxyXG4gICAgICAgICAgICB2YXIgbGk6IEpRdWVyeSA9ICQodGhpcykucGFyZW50cyhcImxpOmZpcnN0XCIpO1xyXG4gICAgICAgICAgICB2YXIgd2lkZ2V0SWQ6IG51bWJlciA9IGxpLmRhdGEoXCJ3aWRnZXQtaWRcIik7XHJcblxyXG4gICAgICAgICAgICBsaS5yZW1vdmUoKTtcclxuICAgICAgICAgICAgcmVtb3ZlZFdpZGdldHMucHVzaCh3aWRnZXRJZCk7XHJcbiAgICAgICAgICAgICQoXCJpbnB1dFtuYW1lPSdyZW1vdmVkV2lkZ2V0cyddXCIpLnZhbChKU09OLnN0cmluZ2lmeShyZW1vdmVkV2lkZ2V0cykpO1xyXG4gICAgICAgICAgICB1cGRhdGVXaWRnZXRQbGFjZW1lbnRGaWVsZCgpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB2YXIgdXBkYXRlV2lkZ2V0UGxhY2VtZW50RmllbGQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciB3aWRnZXRQbGFjZW1lbnRGaWVsZDogSlF1ZXJ5ID0gJChcImlucHV0W25hbWU9J3dpZGdldFBsYWNlbWVudCddXCIpO1xyXG4gICAgICAgICAgICB2YXIgZGF0YSA9IHtcclxuICAgICAgICAgICAgICAgIHpvbmVzOiA8YW55Pnt9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICQoXCJkaXYud2lkZ2V0cyB1bC53aWRnZXRzXCIpLmVhY2goZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIHZhciB6b25lOiBzdHJpbmcgPSAkKHRoaXMpLmRhdGEoXCJ6b25lXCIpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBkYXRhLnpvbmVzW3pvbmVdID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHdpZGdldHM6IG5ldyBBcnJheTxhbnk+KClcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgJCh0aGlzKS5maW5kKFwibGlcIikuZWFjaChmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB3aWRnZXRJZDogbnVtYmVyID0gJCh0aGlzKS5kYXRhKFwid2lkZ2V0LWlkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuem9uZXNbem9uZV0ud2lkZ2V0cy5wdXNoKHdpZGdldElkKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHZhciB0ZXh0OiBzdHJpbmcgPSBKU09OLnN0cmluZ2lmeShkYXRhKTtcclxuICAgICAgICAgICAgd2lkZ2V0UGxhY2VtZW50RmllbGQudmFsKHRleHQpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIEluaXRpYWxpemUgc29ydGFibGUgd2lkZ2V0cy5cclxuICAgICAgICAkKFwiZGl2LndpZGdldHMgdWwud2lkZ2V0c1wiKS5zb3J0YWJsZSh7XHJcbiAgICAgICAgICAgIGNvbm5lY3RXaXRoOiBcImRpdi53aWRnZXRzIHVsLndpZGdldHNcIixcclxuICAgICAgICAgICAgZHJvcE9uRW1wdHk6IHRydWUsXHJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcInNvcnRhYmxlLXBsYWNlaG9sZGVyXCIsXHJcbiAgICAgICAgICAgIHJlY2VpdmU6IGZ1bmN0aW9uKGUsIHVpKXtcclxuICAgICAgICAgICAgICAgIHVwZGF0ZVdpZGdldFBsYWNlbWVudEZpZWxkKCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHVwZGF0ZTogZnVuY3Rpb24oZSwgdWkpe1xyXG4gICAgICAgICAgICAgICAgdXBkYXRlV2lkZ2V0UGxhY2VtZW50RmllbGQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBJbml0aWFsaXplIEV4cGFuZG8gY29udHJvbFxyXG4gICAgICAgICQoXCIjd2lkZ2V0c1BsYWNlbWVudCBsZWdlbmRcIikuZXhwYW5kb0NvbnRyb2woXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIChjb250cm9sbGVyOiBhbnkpIHsgXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29udHJvbGxlci5uZXh0QWxsKFwiLmV4cGFuZG9cIik7IH0sIHsgXHJcbiAgICAgICAgICAgICAgICAgICAgY29sbGFwc2U6IHRydWUsIFxyXG4gICAgICAgICAgICAgICAgICAgIHJlbWVtYmVyOiB0cnVlIH0pO1xyXG4gICAgfSk7XHJcbn0iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
